parameters:
  debug.container.dump: '%kernel.cache_dir%/%kernel.container_class%.xml'

services:

  # Register the container itself as a synthetic service for the modules to be
  # able to use it as a dependency
  service_container:
    class: Symfony\Component\DependencyInjection\ContainerInterface
    synthetic: true

  kernel:
    class: Symfony\Component\HttpKernel\KernelInterface
    factory: [Drupal, _getKernel]
  # Null implementation of the controller resolver when not using fullstack is
  # spawned using the FrameworkBundleIntegrationPass compiler pass, get over it!
  # Following is the actual Symfony definition
  http_kernel:
    class: Symfony\Component\HttpKernel\HttpKernel
    arguments: ["@event_dispatcher", "@controller_resolver", "@request_stack"]

  # Request stack, because we can
  request_stack:
    class: Symfony\Component\HttpFoundation\RequestStack

  # Breadcrumb manager
  breadcrumb:
    class: Drupal\Core\Breadcrumb\BreadcrumbManager

  # Current logged in user, not exactly the same signature than Drupal 8
  # but will be API compatible for most use cases
  current_user:
    class: Drupal\Core\Session\AccountProxy
    arguments: ["@entity.manager"]

  # Pass-through to get the database connection via the service container,
  # available for being a dependency of other services
  database:
    class: DatabaseConnection
    factory: [Database, getConnection]

  drupal.database:
    alias: database

  # Form builder
  form_builder:
    class: Drupal\Core\Form\FormBuilder
    arguments: ["@service_container", "@logger.channel.form"]

  # Module handler, will only proxify what Drupal 7 can do
  module_handler:
    class: Drupal\Core\Extension\ModuleHandler

  # Cache factory
  cache_factory:
    public: false
    class: Drupal\Core\Cache\CacheFactory

  # Expose a few cache backends, core ones minus the very Drupal 8 specific ones
  cache.bootstrap:
    class: Drupal\Core\Cache\CacheBackendInterface
    factory: cache_factory:get
    arguments: [cache_bootstrap]
  cache.default:
    class: Drupal\Core\Cache\CacheBackendInterface
    factory: cache_factory:get
    arguments: [cache]
  cache.entity:
    class: Drupal\Core\Cache\CacheBackendInterface
    factory: cache_factory:get
    arguments: [cache_field]
  cache.menu:
    class: Drupal\Core\Cache\CacheBackendInterface
    factory: cache_factory:get
    arguments: [cache_menu]
  cache.render:
    class: Drupal\Core\Cache\CacheBackendInterface
    factory: cache_factory:get
    arguments: [cache]
  cache.data:
    class: Drupal\Core\Cache\CacheBackendInterface
    factory: cache_factory:get
    arguments: [cache]

  # Register arbitrarily a set of entity controllers which the core provides,
  # this is not Drupal 8 compatible, since it only exposes a single
  # entity.manager service (which is incredibly stupid)
  # @todo
  #   expose all controllers with their own service?
  entity.manager:
    class: Drupal\Core\Entity\EntityManager

  # Also register the bare minimum anyone would need to work with path
  # aliases the Drupal 8 way
  path.alias_manager:
    class: Drupal\Core\Path\AliasManager
    arguments: ['@path.alias_storage', '@cache.data']
  path.alias_storage:
    class: Drupal\Core\Path\DefaultAliasStorage
    arguments: ['@database', '@module_handler']
  path.current:
    class: Drupal\Core\Path\CurrentPathStack
    arguments: ['@request_stack']

  # We are not going to use Drupal 8 event dispatcher, but hopefully the
  # symfony vanilla one is API compatible
  event_dispatcher:
    class: Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher
    arguments: ["@service_container"]

  # Logger that sends everything into the watchdog
  logger.watchdog:
    public: false
    class: MakinaCorpus\Drupal\Sf\Container\Log\DrupalLogger

  # Logger factory from Drupal 8
  logger.factory:
    class: Drupal\Core\Logger\LoggerChannelFactory
    calls:
      - [addLogger, ["@logger.watchdog"]]

  # Expose Drupal 8 default logger channels
  logger.channel_base:
    abstract: true
    class: Drupal\Core\Logger\LoggerChannel
    factory: ["@logger.factory", get]
  logger.channel.default:
    # Sorry this one is public, because we are going to use it in our unit
    # tests, it should be set privte ideally
    parent: logger.channel_base
    arguments: ['system']
  logger.channel.php:
    public: false
    parent: logger.channel_base
    arguments: ['php']
  logger.channel.image:
    public: false
    parent: logger.channel_base
    arguments: ['image']
  logger.channel.cron:
    public: false
    parent: logger.channel_base
    arguments: ['cron']
  logger.channel.file:
    public: false
    parent: logger.channel_base
    arguments: ['file']
  logger.channel.form:
    public: false
    parent: logger.channel_base
    arguments: ['form']

  session:
    class: MakinaCorpus\Drupal\Sf\Session\DrupalSession

  # Register a few Drupal twig helpers, no matter we are using it or not they
  # will be ignored if no twig is running, but aside of that, if Twig is there
  # but not the bundle, this'll work gracefully
  twig.extension.drupal_file:
    public: false
    class: MakinaCorpus\Drupal\Sf\Twig\Extension\DrupalFileExtension
    tags: [{name: twig.extension}]
  twig.extension.drupal_image:
    public: false
    class: MakinaCorpus\Drupal\Sf\Twig\Extension\DrupalImageExtension
    tags: [{name: twig.extension}]
  twig.extension.drupal_node:
    public: false
    class: MakinaCorpus\Drupal\Sf\Twig\Extension\DrupalNodeExtension
    tags: [{name: twig.extension}]
  twig.extension.drupal_pager:
    public: false
    class: MakinaCorpus\Drupal\Sf\Twig\Extension\DrupalPagerExtension
    tags: [{name: twig.extension}]
  twig.extension.drupal_render:
    public: false
    class: MakinaCorpus\Drupal\Sf\Twig\Extension\DrupalRenderExtension
    tags: [{name: twig.extension}]
  twig.extension.drupal_block:
    public: false
    class: MakinaCorpus\Drupal\Sf\Twig\Extension\DrupalBlockExtension
    tags: [{name: twig.extension}]
  twig.extension.drupal_http_render:
    public: true
    class: MakinaCorpus\Drupal\Sf\Twig\Extension\HttpRenderExtension
    arguments: ['@kernel', '@request_stack']
    tags: [{name: twig.extension}]

  sf_dic.console.command.dropkernel:
    class: MakinaCorpus\Drupal\Sf\Command\DropKernelCacheCommand
    tags: [{name: console.command}]
  sf_dic.console.command.cacheclear:
    class: MakinaCorpus\Drupal\Sf\Command\CacheClearCommand
    tags: [{name: console.command}]
  sf_dic.console.command.panic:
    class: MakinaCorpus\Drupal\Sf\Command\PanicCommand
    tags: [{name: console.command}]

  # Scalar from GET/POST argument resolver
  sf_dic.argument_value_resolver.scalar_query:
    class: MakinaCorpus\Drupal\Sf\Controller\ArgumentResolver\RequestQueryValueResolver
    public: false
    # Run before default value resolver
    tags: [{name: controller.argument_value_resolver, priority: -80}]

  # Custom node access helper
  sf_dic.node_access.subscriber:
    class: MakinaCorpus\Drupal\Sf\EventDispatcher\NodeAccessSubscriber
    arguments: ["@event_dispatcher"]
    tags: [{name: event_subscriber}]

  # Symfony controller proxy: where Drupal router driven Symfony controllers
  # are executed, response are built and handled, and exceptions are handled
  # too
  sf_dic.controller_handler:
    public: true
    class: MakinaCorpus\Drupal\Sf\Controller\ControllerHandler
    arguments: ["@argument_resolver", "@service_container"]

  # Empty testing service, it will contain all services this module provides
  # in order to be able to unit test it
  test_empty_service:
    class: MakinaCorpus\Drupal\Sf\Tests\Mockup\EmptyService
    arguments: ["%some_variable%"]
    calls:
      - [setContainer, ["@service_container"]]
      - [setDatabaseConnection, ["@database"]]
