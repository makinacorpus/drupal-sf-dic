services:

  # Register the container itself as a synthetic service for the modules to be
  # able to use it as a dependency
  service_container:
    class: Symfony\Component\DependencyInjection\ContainerInterface
    synthetic: true

  # Request stack, because we can
  request_stack:
    class: Symfony\Component\HttpFoundation\RequestStack

  # Pass-through to get the database connection via the service container,
  # available for being a dependency of other services
  database:
    class: DatabaseConnection
    factory: [Database, getConnection]

  # Form builder
  form_builder:
    class: Drupal\Core\Form\FormBuilder
    arguments: ["@service_container", "@logger.channel.form"]

  # Module handler, will only proxify what Drupal 7 can do
  module_handler:
    class: Drupal\Core\Extension\ModuleHandler

  # Cache factory
  cache_factory:
    public: false
    class: Drupal\Core\Cache\CacheFactory

  # Expose a few cache backends, core ones minus the very Drupal 8 specific ones
  cache.bootstrap:
    class: Drupal\Core\Cache\CacheBackendInterface
    factory: cache_factory:get
    arguments: [cache_bootstrap]
  cache.default:
    class: Drupal\Core\Cache\CacheBackendInterface
    factory: cache_factory:get
    arguments: [cache]
  cache.entity:
    class: Drupal\Core\Cache\CacheBackendInterface
    factory: cache_factory:get
    arguments: [cache_field]
  cache.menu:
    class: Drupal\Core\Cache\CacheBackendInterface
    factory: cache_factory:get
    arguments: [cache_menu]
  cache.render:
    class: Drupal\Core\Cache\CacheBackendInterface
    factory: cache_factory:get
    arguments: [cache]
  cache.data:
    class: Drupal\Core\Cache\CacheBackendInterface
    factory: cache_factory:get
    arguments: [cache]

  # Register arbitrarily a set of entity controllers which the core provides,
  # this is not Drupal 8 compatible, since it only exposes a single
  # entity.manager service (which is incredibly stupid)
  # @todo
  #   expose all controllers with their own service?
  entity.manager:
    public: false
    class: Drupal\Core\Entity\EntityManager

  # We are not going to use Drupal 8 event dispatcher, but hopefully the
  # symfony vanilla one is API compatible
  event_dispatcher:
    class: Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher
    arguments: ["@service_container"]

  # Logger that sends everything into the watchdog
  logger.watchdog:
    public: false
    class: MakinaCorpus\Drupal\Sf\Container\Log\DrupalLogger

  # Logger factory from Drupal 8
  logger.factory:
    class: Drupal\Core\Logger\LoggerChannelFactory
    calls: 
      - [addLogger, ["@logger.watchdog"]]

  # Expose Drupal 8 default logger channels
  logger.channel_base:
    abstract: true
    class: Drupal\Core\Logger\LoggerChannel
    factory: ["@logger.factory", get]
  logger.channel.default:
    # Sorry this one is public, because we are going to use it in our unit
    # tests, it should be set privte ideally
    parent: logger.channel_base
    arguments: ['system']
  logger.channel.php:
    public: false
    parent: logger.channel_base
    arguments: ['php']
  logger.channel.image:
    public: false
    parent: logger.channel_base
    arguments: ['image']
  logger.channel.cron:
    public: false
    parent: logger.channel_base
    arguments: ['cron']
  logger.channel.file:
    public: false
    parent: logger.channel_base
    arguments: ['file']
  logger.channel.form:
    public: false
    parent: logger.channel_base
    arguments: ['form']

  # Empty testing service, it will contain all services this module provides
  # in order to be able to unit test it
  test_empty_service:
    class: MakinaCorpus\Drupal\Sf\Container\Tests\Mockup\EmptyService
    calls:
      - [setContainer, ["@service_container"]]
      - [setDatabaseConnection, ["@database"]]
