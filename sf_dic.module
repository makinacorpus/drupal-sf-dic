<?php
/**
 * @file
 * Various proxy functions to make it work.
 */

use Drupal\Core\Form\FormInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\Language;
use Drupal\user\User;

use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\StreamedResponse;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\KernelEvents;
use Symfony\Component\HttpKernel\HttpKernelInterface;

/**
 * Implements hook_boot().
 */
function sf_dic_boot() {

  // There is no way to allow this module to get the enabled module list
  // before the DRUPAL_BOOTSTRAP_CONFIGURATION phase (if you are lucky and
  // caches are set) or before the DRUPAL_BOOTSTRAP_DATABASE phase (because
  // Drupal will need the database to get the module list). That's why the
  // hook_boot() implementation will keep living in here. This means that
  // there is absolutly no way to allow cache backends services to be in
  // the service container, sad, but true story.
  \Drupal::_getKernel();
  \Drupal::requestStack()->push(Request::createFromGlobals());

  // Change path.inc to proxify toward Drupal 8 compatible API.
  // Do not alter it when the function already exists (mostly happend at site
  // install) - else it will, in some rare case, fail batlantly.
  if (!function_exists('drupal_path_initialize')) {
    $GLOBALS['conf']['path_inc'] = substr(__DIR__, strlen(realpath(DRUPAL_ROOT))) . '/sf_dic.path.inc';
  }

  // Forces Drupal to switch to multilingual
  if (empty($GLOBALS['conf']['language_count']) || $GLOBALS['conf']['language_count'] < 2) {
    $GLOBALS['conf']['language_count'] = 2;
  }

  // This is needed to allow modules to manipulate a UserInterface instance
  // for anonymous user. Note that we don't need to put anything in the user
  // structure since that drupal_anonymous_user() will do it for us.
  $anonymous = new User();
  $anonymous->roles = [DRUPAL_ANONYMOUS_RID => 'anonymous user'];
  $GLOBALS['conf']['drupal_anonymous_user_object'] = $anonymous;
  if (!$GLOBALS['user']->uid) {
    // For older version of core, the 'drupal_anonymous_user_object' is not
    // being used, and may cause serious trouble if object oriented code
    // attempts ot use the anonymous user; let's replace it directly from
    // here. We can't protected code using drupal_anonymous_user() function
    // though.
    $GLOBALS['user'] = $anonymous;
  }
  $accountProxy = \Drupal::service('current_user');
  $accountProxy->setOriginalAccount($GLOBALS['user']);
  $GLOBALS['user'] = $accountProxy;
}

/**
 * Implements hook_language_init().
 */
function sf_dic_language_init() {
  // Replaces the global language by an instance of LanguageInterface.
  $legacy = $GLOBALS['language'];
  if ($legacy instanceof \stdClass) {
    $language = new Language();
    foreach ($legacy as $property => $value) {
      $language->{$property} = $value;
    }
    $GLOBALS['language'] = $language;
  }
}

/**
 * Ensure menu item type is understandable for Drupal.
 *
 * @param scalar[] $item
 */
function _sf_dic_menu_type(&$item) {
  if (!isset($item['type']) || is_numeric($item['type'])) {
    return;
  }
  $realType = 0;
  foreach (explode('|', $item['type']) as $const) {
    $const = trim(strtoupper($const));
    if ('MENU_' === substr($const, 0, 5) && defined($const)) {
      $realType |= constant($const);
    }
  }
  $item['type'] = $realType;
}

/**
 * Implements hook_menu().
 */
function sf_dic_menu() {
  $items = [];
  // Do not force this behavior, it would be so wrong.
  if (variable_get('kernel.symfony_router_enable')) {
    $container = \Drupal::getContainer();
    if ($container->has('router')) {
      /** @var \Symfony\Bundle\FrameworkBundle\Routing\Router $router */
      $router = $container->get('router');
      foreach ($router->getRouteCollection() as $route) {
        /** @var \Symfony\Component\Routing\Route $route */
        if ($route->getHost()) {
          continue; // Not for us.
        }
        // Build a fake Drupal menu entry for each route and pray.
        $path = [];
        foreach (explode('/', trim($route->getPath(), '/')) as $part) {
          if ('{' === $part[0] && '}' === $part[strlen($part) - 1]) {
            $path[] = '%';
          } else {
            $path[] = $part;
          }
        }
        $item = ['page callback' => 'sf_dic_router'];
        // Allow the bundle routing file to describe Drupal menu item options.
        $options = $route->getOption('drupal');
        if ($options) {
          $item += $options;
          _sf_dic_menu_type($item);
        }
        // And we're good to go!
        $items[implode('/', $path)] = $item;
      }
    }
  }
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function sf_dic_menu_alter(&$items) {
  // Enfore the node_add() callback to use Node objects.
  foreach (node_type_get_types() as $type) {
    $path = 'node/add/' . str_replace('_', '-', $type->type);
    if (isset($items[$path])) {
      $items[$path]['page callback'] = 'sf_dic_node_add_page';
    }
  }
  // We have controllers of our own, they are supposed to embed their own
  // access control logic and proceed with other kind of no Drupal magic.
  foreach ($items as &$item) {
    if (isset($item['page callback']) && ('sf_dic_page' === $item['page callback'] || 'sf_dic_router' === $item['page callback'])) {
      if (!array_key_exists('type', $item)) {
        $item['type'] = MENU_CALLBACK;
      }
      if (!array_key_exists('access callback', $item) && !array_key_exists('access arguments', $item)) {
        $item['access callback'] = true;
      }
    }
  }
}

/**
 * Overwrite of node_add().
 */
function sf_dic_node_add_page($type) {
  $account = \Drupal::currentUser();

  $types = node_type_get_types();
  $node = \Drupal::service('entity.manager')
    ->getStorage('node')
    ->create()
    ->setOwnerId($account->id())
  ;
  $node->type = $type;
  $node->language = LANGUAGE_NONE;
  $node->name = $account->getAccountName();

  drupal_set_title(t('Create @name', array('@name' => $types[$type]->name)), PASS_THROUGH);
  $output = drupal_get_form($type . '_node_form', $node);

  return $output;
}


/**
 * Implements hook_flush_caches().
 */
function sf_dic_flush_caches() {
  \Drupal::unsetContainer();
  return [];
}

/**
 * Render with twig
 *
 * @param string $view
 * @param string $parameters
 *
 * @return string
 */
function sf_dic_twig_render($view, $parameters) {
  return \Drupal::service('twig')->render($view, $parameters);
}

/**
 * Create a new instance of plugin, the hard way
 *
 * @param string $class
 *   Class name.
 * @param mixed[] $configuration
 *   The plugin configuration.
 *
 * @return mixed
 *   The plugin instance.
 */
function sf_dic_plugin_create($class, $configuration = []) {
  $r = new ReflectionClass($class);
  if ($r->implementsInterface('Drupal\Core\Plugin\ContainerFactoryPluginInterface')) {
    $instance = call_user_func([$class, 'create'], \Drupal::getContainer(), $configuration, null, null);
  } else if ($r->isSubclassOf('Drupal\Core\Plugin\PluginBase')) {
    $instance = $r->newInstance($configuration, null, null);
  } else {
    throw new \InvalidArgumentException(sprintf("%s: is not a plugin", $class));
  }
  return $instance;
}

/**
 * Deal with anything returned by a Symfony style controller.
 *
 * @param mixed $response
 */
function _sf_dic_response($response) {
  // @todo Partial support only of symfony http response, headers and others
  //   are ignored, we should probably have a custom delivery callback in order
  //   to fully support this.
  if ($response instanceof JsonResponse ||
      $response instanceof StreamedResponse ||
      ($response instanceof Response && 'application/xml' === $response->headers->get('Content-Type'))
  ) {
    $response->send();
    drupal_exit();
    return;
  }
  if ($response instanceof Response) {
    $response = (string)$response->getContent();
  }
  return $response;
}

/**
 * Menu callback for using Symfony real router.
 */
function sf_dic_router() {
  try {
    $ret = _sf_dic_response(
      \Drupal::service('kernel')->handle(
        \Drupal::requestStack()->getCurrentRequest(),
        HttpKernelInterface::MASTER_REQUEST,
        false
      )
    );
  } catch (AccessDeniedHttpException $e) {
    return MENU_ACCESS_DENIED;
  } catch (NotFoundHttpException $e) {
    return MENU_NOT_FOUND;
  } catch (HttpException $e) {
    switch ($e->getStatusCode()) {
      case 403:
        return MENU_ACCESS_DENIED;
      case 404:
        return MENU_NOT_FOUND;
    }
    throw $e;
  }

  return $ret;
}

/**
 * Menu callback for using controllers via hook_menu().
 */
function sf_dic_page($controller) {
  $args = func_get_args();
  array_shift($args);

  $method = null;

  // CLASS::STATIC_METHOD is not supported here.
  if (false !== strpos($controller, '::')) {
    list($controller, $method) = explode('::', $controller, 2);
  }

  if (class_exists($controller)) {
    $controller = new $controller();
  } else if (\Drupal::hasService($controller)) {
    $controller = \Drupal::service($controller);
  } else {
    throw new InvalidArgumentException(sprintf("%s: is not callable or class does not exist", $controller));
  }

  if (null === $method) {
    $method = 'render';
  }

  if (!method_exists($controller, $method)) {
    $method = $method . 'Action';
    if (!method_exists($controller, $method)) {
      throw new InvalidArgumentException(sprintf("%s::%s(), %s::%sAction(), %s::render(): method does not exists", $controller, $method, $controller, $method, $controller));
    }
  }

  // Little bit of magic.
  $r = new ReflectionClass(get_class($controller));
  $rm = $r->getMethod($method);
  $request = \Drupal::request();
  foreach (array_values($rm->getParameters()) as $index => $rp) {
    /* @var $rp \ReflectionParameter */
    if ($rc = $rp->getClass()) {
      if ('Symfony\Component\HttpFoundation\Request' === $rc->getName()) {
        array_splice($args, $index, 0, [$request]);
      }
    }
  }

  // We cannot use the ContainerAwareInterface since in SF3 the recommended way
  // is to use the ContainerAwareTrait which won't give any meta information on
  // the object about weither or not we should inject the container.
  if (method_exists($controller, 'setContainer')) {
    $controller->setContainer(\Drupal::getContainer());
  }

  try {
    $ret = _sf_dic_response(call_user_func_array([$controller, $method], $args));
  } catch (AccessDeniedHttpException $e) {
    return MENU_ACCESS_DENIED;
  } catch (NotFoundHttpException $e) {
    return MENU_NOT_FOUND;
  } catch (HttpException $e) {
    switch ($e->getStatusCode()) {
      case 403:
        return MENU_ACCESS_DENIED;
      case 404:
        return MENU_NOT_FOUND;
    }
    throw $e;
  }

  return $ret;
}

/**
 * Menu callback for doing forms.
 */
function sf_dic_page_form($formClass) {
  return call_user_func_array([\Drupal::formBuilder(), 'getForm'], func_get_args());
}

/**
 * Implements hook_exit().
 */
function sf_dic_exit() {
  \Drupal::service('event_dispatcher')->dispatch(KernelEvents::TERMINATE);
}

/**
 * Implements hook_form().
 */
function sf_dic_forms($form_id, $args) {
  if (\Drupal::formBuilder()->getFormInstance($form_id)) {
    return [$form_id => ['callback' => 'sf_dic_forms_proxy']];
  } else {
    return [];
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function sf_dic_entity_info_alter(&$entity_info) {
  if (isset($entity_info['node'])) {
    $entity_info['node']['controller class'] = '\Drupal\node\CompatNodeController';
  }
  if (isset($entity_info['user'])) {
    $entity_info['user']['controller class'] = '\Drupal\user\CompatUserController';
  }
}

/**
 * Recursively unpack callbacks for the given form
 *
 * @param FormInterface $instance
 * @param FormStateInterface $form_state
 * @param mixed[] $form
 */
function sf_dic_forms_proxy_unpack_callback(FormInterface $form_obj, FormStateInterface $form_state_obj, array &$form) {

  foreach (['#process', '#after_build', '#submit', '#validate', '#element_validate'] as $name) {
    // @todo Handle ['#ajax' => callback].
    if (isset($form[$name])) {
      if (is_array($form[$name])) {
        foreach ($form[$name] as $index => $callback) {
          // Lookup for callbacks declared such as "::submitSomething()" and
          // build a PHP valid callable with it instead, that should be enough
          // to trick core From API into executing it.
          if (!is_callable($callback) && is_string($callback) && '::' === substr($callback, 0, 2)) {

            $method = substr($callback, 2);

            // Deal with '#element_validate' differently to mimic Drupal 8
            // behavior.
            switch ($name) {

              case '#element_validate':
                $form[$name][$index] = function (&$element, &$form_state, &$complete_form) use ($form_obj, $method, $form_state_obj) {
                  return call_user_func([$form_obj, $method], $element, $form_state_obj, $complete_form);
                };
                break;

              default:
                $form[$name][$index] = function (&$form) use ($form_obj, $method, $form_state_obj) {
                  return call_user_func([$form_obj, $method], $form, $form_state_obj);
                };
                break;
            }

          }
        }
      } // Else this is an error... But I'll that to core to deal with.
    }
  }

  foreach (element_children($form) as $key) {
    sf_dic_forms_proxy_unpack_callback($form_obj, $form_state_obj, $form[$key]);
  }
}

/**
 * Form processor.
 */
function sf_dic_forms_proxy_process($form, &$form_state, &$complete_form) {

  $objects = \Drupal::formBuilder()->getFormInstance($form_state['build_info']['form_id']);

  if (!$objects) { // Just to be sure it won't WSOD.
    return $form;
  }

  list($form_obj, $form_state_obj) = $objects;

  // Because we want it to be really close to real Drupal forms, we need to
  // proceed to a few callback names unpacking.
  sf_dic_forms_proxy_unpack_callback($form_obj, $form_state_obj, $form);

  return $form;
}

/**
 * Build form from a FormInterface object
 */
function sf_dic_forms_proxy($form, &$form_state) {

  $objects = \Drupal::formBuilder()->getFormInstance($form_state['build_info']['form_id']);

  if (!$objects) { // Just to be sure it won't WSOD.
    return $form;
  }

  /** @var $form_obj FormInterface */
  /** @var $form_state_obj FormStateInterface */
  list($form_obj, $form_state_obj) = $objects;

  $args = func_get_args();
  array_shift($args);
  array_shift($args);
  array_unshift($args, $form_state_obj);
  array_unshift($args, $form);

  $form = call_user_func_array([$form_obj, 'buildForm'], $args);

  // We attach process so that it will happen after the form has been set
  // or retrieved from the cache, avoiding Closure serialization attempt.
  $form['#process'][] = 'sf_dic_forms_proxy_process';

  // Setup the submit and validate global handlers.
  if (empty($form['#submit'])) {
    $form['#submit'] = ['::submitForm'];
  }
  if (empty($form['#validate'])) {
    $form['#validate'] = ['::validateForm'];
  }

  return $form;
}

