<?php
/**
 * @file
 * Various proxy functions to make it work.
 */

use Drupal\Core\Form\FormInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\Language;
use Drupal\Core\Routing\RouteMatch;
use Drupal\user\User;
use MakinaCorpus\Drupal\Sf\DrupalPageResponse;
use MakinaCorpus\Drupal\Sf\DataCollector\DrupalDatabaseDataCollector;
use MakinaCorpus\Drupal\Sf\EventDispatcher\FormEvent;
use MakinaCorpus\Drupal\Sf\Security\DrupalUser;
use MakinaCorpus\Drupal\Sf\Security\Token\UserToken;
use Symfony\Component\Debug\Exception\FlattenException;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\HttpKernelInterface;
use Symfony\Component\HttpKernel\KernelEvents;
use Symfony\Component\HttpKernel\Controller\ControllerReference;
use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
use Symfony\Component\HttpKernel\Event\GetResponseEvent;
use Symfony\Component\HttpKernel\Event\PostResponseEvent;

/**
 * Implements hook_boot().
 */
function sf_dic_boot() {
  global $is_https;

  // There is no way to allow this module to get the enabled module list
  // before the DRUPAL_BOOTSTRAP_CONFIGURATION phase (if you are lucky and
  // caches are set) or before the DRUPAL_BOOTSTRAP_DATABASE phase (because
  // Drupal will need the database to get the module list). That's why the
  // hook_boot() implementation will keep living in here. This means that
  // there is absolutly no way to allow cache backends services to be in
  // the service container, sad, but true story.
  \Drupal::_getKernel();
  $container = \Drupal::getContainer();

  $request = MakinaCorpus\Drupal\Sf\Http\Request::createFromGlobals();
  /** @var \Symfony\Component\HttpFoundation\Session\SessionInterface $session */
  $session = $container->get('session');
  $request->setSession($session);
  // Inherits from $_GET['q'] as pathInfo instead of letting Symfony
  // pragmatically find it, since we do need Drupal alias replacement to
  // have been done.
  \Drupal::requestStack()->push($request);

  // Register the database collector as soon as possible.
  if ($container->has('makinacorpus.drupal_database_collector')) {
    $logger = new \DatabaseLog();
    $logger->start(DrupalDatabaseDataCollector::LOGGER_KEY);
    \Database::getConnection()->setLogger($logger);
  }

  // Let Symfony code will run gracefully.
  // @todo explode menu API parameters in _route_params and populate
  //   request attributes as well, for the argument resolver to work
  //   gracefully.
  $request->attributes->set('_route', $_GET['q']);
  $request->attributes->set('_route_params', []);

  // It may happen that https state is not detected due to misconfigured
  // environments, so we are going to fix this.
  if (!$is_https && $request->isSecure()) {
    $is_https = true;
  }

  // Change path.inc to proxify toward Drupal 8 compatible API.
  // Do not alter it when the function already exists (mostly happend at site
  // install) - else it will, in some rare case, fail batlantly.
  if (!function_exists('drupal_path_initialize')) {
    $GLOBALS['conf']['path_inc'] = substr(__DIR__, strlen(realpath(DRUPAL_ROOT))) . '/sf_dic.path.inc';
  }

  // Forces Drupal to switch to multilingual
  if (empty($GLOBALS['conf']['language_count']) || $GLOBALS['conf']['language_count'] < 2) {
    $GLOBALS['conf']['language_count'] = 2;
  }

  // This is needed to allow modules to manipulate a UserInterface instance
  // for anonymous user. Note that we don't need to put anything in the user
  // structure since that drupal_anonymous_user() will do it for us.
  $anonymous = new User();
  $anonymous->roles = [DRUPAL_ANONYMOUS_RID => 'anonymous user'];
  $GLOBALS['conf']['drupal_anonymous_user_object'] = $anonymous;
  if (!$GLOBALS['user']->uid) {
    // For older version of core, the 'drupal_anonymous_user_object' is not
    // being used, and may cause serious trouble if object oriented code
    // attempts ot use the anonymous user; let's replace it directly from
    // here. We can't protected code using drupal_anonymous_user() function
    // though.
    $GLOBALS['user'] = $anonymous;
  }
  $accountProxy = \Drupal::service('current_user');
  $accountProxy->setOriginalAccount($GLOBALS['user']);
  $GLOBALS['user'] = $accountProxy;

  // Prevent isGranted() and alike methods to crash when the kernel is not
  // actually handling the incomming request.
  if ($container->has('security.token_storage')) {
    $token = new UserToken();
    $token->setAuthenticated(true);
    $token->setUser(new DrupalUser($GLOBALS['user']));
    $container->get('security.token_storage')->setToken($token);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function sf_dic_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {

    case 'menu_breadcrumb_alter':
      // We do need to be the first
      $group = $implementations['sf_dic'];
      unset($implementations['sf_dic']);
      $implementations = ['sf_dic' => $group] + $implementations;
      break;

    case 'node_load':
      // @see \Drupal\node\CompatNodeController
      unset($implementations['user']);
      break;
  }
}

/**
 * Implements hook_language_init().
 */
function sf_dic_language_init() {

  // Replaces the global language by an instance of LanguageInterface.
  $legacy = $GLOBALS['language'];
  if ($legacy instanceof \stdClass) {
    $language = new Language();
    foreach ($legacy as $property => $value) {
      $language->{$property} = $value;
    }
    $GLOBALS['language'] = $language;
  }

  // Modify the request internals so that $_GET['q'] actually
  // matches what Drupal found.
  $request = \Drupal::request();
  $request->query->set('q', $_GET['q']);
  $request->attributes->set('_route', $_GET['q']);
}

/**
 * Implements hook_init().
 */
function sf_dic_init() {
  // @todo temporary disable this when fullstack is enabled, because a few
  //   components will attempt to match the current route over the current URL
  //   and throw exceptions if unfound
  // Do not run the event if current menu item is handled by Symfony itself,
  // case in which the kernel will run it by itself, no need to run it twice.
  if (!drupal_is_cli() && ($item = menu_get_item()) && 'sf_dic_router' !== $item['page_callback']) {
    // Raise the KernelEvents::REQUEST for non-Symfony page execution. Please
    // note that this will make it run twice in case we do use the real Symfony
    // kernel to handle a real Symfony controller.
    $httpKernel = \Drupal::service('http_kernel');
    $request = \Drupal::request();
    $event = new GetResponseEvent($httpKernel, $request, HttpKernelInterface::MASTER_REQUEST);
    // Very specific and ugly way of solving the RouterListener throwing
    // exceptions: if we have a Drupal route, do not let it attempt to
    // match one from the framework.
    $request->attributes->set('_controller', '_drupal_menu_router');
    \Drupal::service('event_dispatcher')->dispatch(KernelEvents::REQUEST, $event);
    $request->attributes->remove('_controller');
  }
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function sf_dic_menu_breadcrumb_alter(&$active_trail, $item) {
  $container = \Drupal::getContainer();

  if ($container->has('breadcrumb')) {
    /** @var \Drupal\Core\Breadcrumb\BreadcrumbManager $manager */
    $manager = $container->get('breadcrumb');
    $routeMatch = new RouteMatch(\Drupal::request());
    $breadcrumb = $manager->build($routeMatch);

    // Build a new breadcrumb using the one given by implementations
    if (!$breadcrumb->isEmpty()) {
      $active_trail = [];
      foreach ($breadcrumb->getLinks() as $link) {
        $url = $link->getUrl();

        if (!$url->isExternal()) {
          // We use the router independently of the link is a Drupal path or not
          // which allows us to transparently build Symfony URL's from routes,
          // on the other hand, because our custom router also handles Drupal
          // paths via url(), it will work gracefully.
          // @todo is missing absolute URL generation important here?
          $href = \Drupal::service('router')->generate($url->getRouteName(), $url->getRouteParameters());
        } else {
          $href = $url->getUri();
        }

        $active_trail[] = [
          'href'              => $href,
          'title'             => $link->getText(),
          'localized_options' => $url->getOptions(),
          'type'              => MENU_CALLBACK,
        ];
      }
    }
  }
}

/**
 * Does the given bundle exists and is enabled
 *
 * @param string $bundle
 *   The bundle class name, such as VendorSomethingBundle
 *
 * @return bool
 */
function sf_dic_bundle_exists($bundle) {
  $container = \Drupal::getContainer();
  if ($container->hasParameter('kernel.bundles')) {
    return isset($container->getParameter('kernel.bundles')[$bundle]);
  }
  return false;
}

/**
 * Menu access helper in case you need to do access checks on nodes in menu
 * but still use a node identifier instead of a node object
 */
function sf_dic_menu_node_access($op, $node) {
  if (is_numeric($node)) {
    $node = node_load($node);
  }
  if (!$node) {
    return false;
  }
  return node_access($op, $node);
}

/**
 * Ensure menu item type is understandable for Drupal.
 *
 * @param array $item
 *   Drupal menu item to fix
 */
function _sf_dic_menu_type(&$item) {
  if (!isset($item['type']) || is_numeric($item['type'])) {
    return;
  }
  $realType = 0;
  foreach (explode('|', $item['type']) as $const) {
    $const = trim(strtoupper($const));
    if ('MENU_' === substr($const, 0, 5) && defined($const)) {
      $realType |= constant($const);
    }
  }
  $item['type'] = $realType;
}

/**
 * Implements hook_menu().
 */
function sf_dic_menu() {
  $items = [];

  // Do not force this behavior, it would be so wrong.
  if (variable_get('kernel.symfony_router_enable')) {
    $container = \Drupal::getContainer();
    // Allow fragment renderers to work.
    if ($container->hasParameter('fragment.path')) {
      $items[trim($container->getParameter('fragment.path'), '/')] = [
        'page callback'   => 'sf_dic_router',
        'access callback' => true,
      ];
    }
    // Build the routing table from Symfony router.
    if ($container->has('router')) {
      /** @var \Symfony\Bundle\FrameworkBundle\Routing\Router $router */
      $router = $container->get('router');
      foreach ($router->getRouteCollection() as $route) {
        /** @var \Symfony\Component\Routing\Route $route */
        if ($route->getHost()) {
          continue; // Not for us.
        }
        // Build a fake Drupal menu entry for each route and pray.
        $path = [];
        foreach (explode('/', trim($route->getPath(), '/')) as $part) {
          if ('{' === $part[0] && '}' === $part[strlen($part) - 1]) {
            $path[] = '%';
          } else {
            $path[] = $part;
          }
        }
        $item = ['page callback' => 'sf_dic_router'];
        // Allow the bundle routing file to describe Drupal menu item options.
        $options = $route->getOption('drupal');
        if ($options) {
          $item += $options;
          _sf_dic_menu_type($item);
        }
        // And we're good to go!
        $items[implode('/', $path)] = $item;
      }
    }
  }

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function sf_dic_menu_alter(&$items) {
  // Enfore the node_add() callback to use Node objects.
  foreach (node_type_get_types() as $type) {
    $path = 'node/add/' . str_replace('_', '-', $type->type);
    if (isset($items[$path])) {
      $items[$path]['page callback'] = 'sf_dic_node_add_page';
    }
  }
  // We have controllers of our own, they are supposed to embed their own
  // access control logic and proceed with other kind of no Drupal magic.
  foreach ($items as &$item) {
    if (isset($item['page callback']) && ('sf_dic_page' === $item['page callback'] || 'sf_dic_router' === $item['page callback'])) {
      if (!array_key_exists('type', $item)) {
        $item['type'] = MENU_CALLBACK;
      }
      if (!array_key_exists('access callback', $item) && !array_key_exists('access arguments', $item)) {
        $item['access callback'] = true;
      }
    }
  }
}

/**
 * Overwrite of node_add().
 */
function sf_dic_node_add_page($type) {
  $account = \Drupal::currentUser();

  $types = node_type_get_types();
  $node = \Drupal::service('entity.manager')
    ->getStorage('node')
    ->create()
    ->setOwnerId($account->id())
  ;
  $node->type = $type;
  $node->language = LANGUAGE_NONE;
  $node->name = $account->getAccountName();

  drupal_set_title(t('Create @name', array('@name' => $types[$type]->name)), PASS_THROUGH);
  $output = drupal_get_form($type . '_node_form', $node);

  return $output;
}


/**
 * Implements hook_flush_caches().
 */
function sf_dic_flush_caches() {
  // Clear container only if the whole Drupal cache is asked for wiping
  // else this would be run on every system_cron() call and wipe out too
  // aggressively the Symfony cache. In a perfect world, this would not
  // have any side effect, but when using a NFS or anyother slow file
  // system, this causes too much IO on the FS, and in certain cases it
  // will make the FS freeze and the site being irresponsive until the OS
  // regain control.
  foreach (debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS) as $caller) {
    if (isset($caller['function']) && $caller['function'] === 'drupal_flush_all_caches') {
      \Drupal::unsetContainer();
      break;
    }
  }
  return [];
}

/**
 * Generate route
 *
 * @param string $name
 * @param array $parameters
 * @param int $referenceType
 *
 * @return string
 */
function sf_dic_route_generate($name, $parameters = [], $referenceType = 0) {
  return \Drupal::service('router')->generate($name, $parameters, $referenceType);
}

/**
 * Render with twig
 *
 * @param string $view
 * @param string $parameters
 *
 * @return string
 */
function sf_dic_twig_render($view, $parameters) {
  return \Drupal::service('twig')->render($view, $parameters);
}

/**
 * Directly render a controller without using the fragment handler, bypassing
 * any cache it would provide, but allowing POST requests to go down the stack
 * providing a Hierarchical-MVC/PAC like implementation
 *
 * @param string $controller
 *   The controller name (a string like BlogBundle:Post:index)
 * @param array $path
 *   An array of path parameters, if none, will inherit from the master request
 * @param array $query
 *   An array of query parameters, if none, will inherit from the master request
 *
 * @return string
 *   The rendered controller
 */
function sf_dic_controller_render($controller, array $path = [], array $query = null) {
  return \Drupal::getContainer()->get('twig.extension.drupal_http_render')->doForward($controller, $path, $query);
}

/**
 * Alter-ego of the render() and render_*() twig functions: renders a fragment.
 *
 * This method is only usable if you are working with the Symfony full stack
 * framework bundle enabled.
 *
 * @param string|ControllerReference $uri
 *   A URI as a string or a ControllerReference instance
 * @param string[] $options
 *   An array of options
 *
 * @see Symfony\Component\HttpKernel\Fragment\FragmentHandler::render()
 * @see Symfony\Bridge\Twig\Extension\HttpKernelExtension::renderFragment()
 *
 * @return string
 *   The fragment content
 */
function sf_dic_http_render($uri, $options = [], $strategy = null) {
  if (null === $strategy) {
    $strategy = isset($options['strategy']) ? $options['strategy'] : 'inline';
    unset($options['strategy']);
  }
  return \Drupal::service('fragment.handler')->render($uri, $strategy, $options);
}

/**
 * Alter-ego of the controller() twig function: returns a controller reference.
 *
 * This method is only usable if you are working with the Symfony full stack
 * framework bundle enabled.
 *
 * @param string $controller
 * @param string[] $attributes
 * @param string[] $query
 *
 * @see Symfony\Bridge\Twig\Extension\HttpKernelExtension::controller()
 *
 * @return string
 *   The fragment content
 */
function sf_dic_http_controller($controller, $attributes = [], $query = []) {
  return new ControllerReference($controller, $attributes, $query);
}

/**
 * Create a new instance of plugin, the hard way
 *
 * @param string $class
 *   Class name.
 * @param mixed[] $configuration
 *   The plugin configuration.
 *
 * @return mixed
 *   The plugin instance.
 */
function sf_dic_plugin_create($class, $configuration = []) {
  $r = new ReflectionClass($class);
  if ($r->implementsInterface('Drupal\Core\Plugin\ContainerFactoryPluginInterface')) {
    $instance = call_user_func([$class, 'create'], \Drupal::getContainer(), $configuration, null, null);
  } else if ($r->isSubclassOf('Drupal\Core\Plugin\PluginBase')) {
    $instance = $r->newInstance($configuration, null, null);
  } else {
    throw new \InvalidArgumentException(sprintf("%s: is not a plugin", $class));
  }
  return $instance;
}

/**
 * Menu callback for using Symfony real router.
 */
function sf_dic_router() {
  /** @var \MakinaCorpus\Drupal\Sf\Controller\ControllerHandler $handler */
  $handler = \Drupal::service('sf_dic.controller_handler');
  $request = \Drupal::request();
  $GLOBALS['sf_dic_router'] = true;
  try {
    /** @var \Symfony\Component\HttpKernel\Kernel $kernel */
    $kernel = \Drupal::service('kernel');
    return $handler->prepareResponseForDrupal($request, $kernel->handle($request, HttpKernelInterface::MASTER_REQUEST, variable_get('kernel.handle_exceptions', false)));
  } catch (\Exception $exception) {
    return $handler->handleException($request, $exception);
  }
}

/**
 * Menu callback for using controllers via hook_menu().
 */
function sf_dic_page($controller) {
  // Gather page arguments
  $funcArguments = func_get_args();
  array_shift($funcArguments);
  // Execute and handle response
  /** @var \MakinaCorpus\Drupal\Sf\Controller\ControllerHandler $handler */
  $handler = \Drupal::service('sf_dic.controller_handler');
  return $handler->handle($controller, \Drupal::request(), $funcArguments, 'render', 'Action');
}

/**
 * Access callback for using controllers via hook_menu().
 *
 * TODO: refactor to merge sf_dic_page()
 */
function sf_dic_page_access($controller) {
  // Gather page arguments
  $funcArguments = func_get_args();
  array_shift($funcArguments);
  // Execute and return response
  /** @var \MakinaCorpus\Drupal\Sf\Controller\ControllerHandler $handler */
  $handler = \Drupal::service('sf_dic.controller_handler');
  return $handler->execute($controller, \Drupal::request(), $funcArguments, 'access', 'Access');
}

/**
 * Menu callback for doing forms.
 */
function sf_dic_page_form($formClass) {
  return call_user_func_array([\Drupal::formBuilder(), 'getForm'], func_get_args());
}

/**
 * Implements hook_exit().
 */
function sf_dic_exit() {
  // Do not run the event twice.
  if (empty($GLOBALS['sf_dic_router']) && \Drupal::hasRequest()) {
    $event = new PostResponseEvent(\Drupal::_getKernel(), \Drupal::request(), new Response());
    \Drupal::service('event_dispatcher')->dispatch(KernelEvents::TERMINATE, $event);
  }
}

/**
 * Implements hook_form().
 */
function sf_dic_forms($form_id, $args) {
  if (\Drupal::formBuilder()->getFormInstance($form_id)) {
    return [$form_id => ['callback' => 'sf_dic_forms_proxy']];
  } else {
    return [];
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function sf_dic_entity_info_alter(&$entity_info) {
  if (isset($entity_info['node'])) {
    $entity_info['node']['controller class'] = '\Drupal\node\CompatNodeController';
  }
  if (isset($entity_info['user'])) {
    $entity_info['user']['controller class'] = '\Drupal\user\CompatUserController';
  }
}

/**
 * Recursively unpack callbacks for the given form
 *
 * @param FormInterface $instance
 * @param FormStateInterface $form_state
 * @param mixed[] $form
 */
function sf_dic_forms_proxy_unpack_callback(FormInterface $form_obj, FormStateInterface $form_state_obj, array &$form) {

  foreach (['#process', '#after_build', '#submit', '#validate', '#element_validate'] as $name) {
    // @todo Handle ['#ajax' => callback].
    if (isset($form[$name]) && is_array($form[$name])) {
      foreach ($form[$name] as $index => $callback) {

        if ($callback instanceof \Closure) {
          // Deal with closures manually
          switch ($name) {

            case '#element_validate':
              $form[$name][$index] = function (&$element, &$form_state, &$complete_form) use ($callback, $form_state_obj) {
                return call_user_func($callback, $element, $form_state_obj, $complete_form);
              };
              break;

            default:
              $form[$name][$index] = function (&$form) use ($callback, $form_state_obj) {
                return call_user_func($callback, $form, $form_state_obj);
              };
              break;
          }

        } else if (!is_callable($callback) && is_string($callback) && '::' === substr($callback, 0, 2)) {
          // Lookup for callbacks declared such as "::submitSomething()" and
          // build a PHP valid callable with it instead, that should be enough
          // to trick core From API into executing it.
          $method = substr($callback, 2);

          // Deal with '#element_validate' differently to mimic Drupal 8
          // behavior.
          switch ($name) {

            case '#element_validate':
              $form[$name][$index] = function (&$element, &$form_state, &$complete_form) use ($form_obj, $method, $form_state_obj) {
                return call_user_func([$form_obj, $method], $element, $form_state_obj, $complete_form);
              };
              break;

            default:
              $form[$name][$index] = function (&$form) use ($form_obj, $method, $form_state_obj) {
                return call_user_func([$form_obj, $method], $form, $form_state_obj);
              };
              break;
          }
        }
      }
    } // Else this is an error... But I'll leave that to core to deal with.
  }

  foreach (element_children($form) as $key) {
    sf_dic_forms_proxy_unpack_callback($form_obj, $form_state_obj, $form[$key]);
  }
}

/**
 * Form processor.
 */
function sf_dic_forms_proxy_process($form, &$form_state, &$complete_form) {

  $objects = \Drupal::formBuilder()->getFormInstance($form_state['build_info']['form_id']);

  if (!$objects) { // Just to be sure it won't WSOD.
    return $form;
  }

  list($form_obj, $form_state_obj) = $objects;

  // Because we want it to be really close to real Drupal forms, we need to
  // proceed to a few callback names unpacking.
  sf_dic_forms_proxy_unpack_callback($form_obj, $form_state_obj, $form);

  return $form;
}

/**
 * Build form from a FormInterface object
 */
function sf_dic_forms_proxy($form, &$form_state) {

  $objects = \Drupal::formBuilder()->getFormInstance($form_state['build_info']['form_id']);

  if (!$objects) { // Just to be sure it won't WSOD.
    return $form;
  }

  /** @var $form_obj FormInterface */
  /** @var $form_state_obj FormStateInterface */
  list($form_obj, $form_state_obj) = $objects;

  $args = func_get_args();
  array_shift($args);
  array_shift($args);
  array_unshift($args, $form_state_obj);
  array_unshift($args, $form);

  $form = call_user_func_array([$form_obj, 'buildForm'], $args);

  $event = new FormEvent($form_obj, $form_state_obj);
  \Drupal::service('event_dispatcher')->dispatch(FormEvent::EVENT_ALTER, $event);

  $event = new FormEvent($form_obj, $form_state_obj);
  \Drupal::service('event_dispatcher')->dispatch(FormEvent::EVENT_ALTER_PREFIX . $form_obj->getFormId(), $event);

  // We attach process so that it will happen after the form has been set
  // or retrieved from the cache, avoiding Closure serialization attempt.
  $form['#process'][] = 'sf_dic_forms_proxy_process';

  // Setup the submit and validate global handlers.
  if (empty($form['#submit'])) {
    $form['#submit'] = ['::submitForm'];
  }
  if (empty($form['#validate'])) {
    $form['#validate'] = ['::validateForm'];
  }

  return $form;
}

/**
 * Implements hook_delivery_callback_alter().
 */
function sf_dic_page_delivery_callback_alter(&$delivery_callback) {
  // We want the web debug toolbar, and other nice stuff that looks like it,
  // allow them by running the 'kernel.response' event in a custom delivery
  // callback that'll alter the generated page.
  if ('drupal_deliver_html_page' === $delivery_callback) {
    $delivery_callback = 'sf_dic_page_delivery_html';
  }
}

/**
 * Specific page delivery callback that will allow our Drupal page to be seen
 * as a Symfony Response instead.
 */
function sf_dic_page_delivery_html($page_callback_result) {
  $request  = \Drupal::request();

  if (!$page_callback_result || is_int($page_callback_result)) {
    // Drupal is terribly not funnny, and handles 403/404 pages by calling
    // menu_execute_active_handler() while rendering the page, which will
    // cause it to embed a Symfony response into a Drupal page, even if it
    // has its own HTML embeded. We need to avoid that.
    $exception = null;
    if (variable_get('kernel.symfony_all_the_way', false)) {
      // Let Symfony handle errors and trust it to it better than Drupal.
      switch ($page_callback_result) {
        case MENU_ACCESS_DENIED:
          $exception = new \Symfony\Component\Security\Core\Exception\AccessDeniedException();
          break;
        case MENU_NOT_FOUND:
          $exception = new \Symfony\Component\HttpKernel\Exception\NotFoundHttpException();
          break;
      }
    }
    if ($exception) {
      /** @var \MakinaCorpus\Drupal\Sf\Controller\ControllerHandler $handler */
      $handler = \Drupal::service('sf_dic.controller_handler');
      $page_callback_result = $handler->prepareResponseForDrupal($request, $handler->handleError($request, $exception));
    } else {
      // Always fallback on Drupal delivery mecanism when there's actually
      // nothing that can be done by Symfony - but I doubt this'll happen
      // very often except with 50X errors.
      return drupal_deliver_html_page($page_callback_result);
    }
  }

  if (!$page_callback_result instanceof Response) {
      $response = new DrupalPageResponse($page_callback_result);
  } else {
      $response = $page_callback_result;
  }

  // This event will be run twice if the current router is sf_dic_router (using
  // Symfony kernel to handle the request) - but since we do override the
  // request and embed it into a custom Drupal page one, this will run with a
  // different response than Symfony's one - I guess that's OK.
  $kernel = \Drupal::_getKernel();
  $event = new FilterResponseEvent($kernel, $request, HttpKernelInterface::MASTER_REQUEST, $response);
  \Drupal::service('event_dispatcher')->dispatch(KernelEvents::RESPONSE, $event);

  $response->send();
}

/**
 * Implements hook_watchdog().
 */
function sf_dic_watchdog(array $log_entry) {
  $dataCollectorEnabled = &drupal_static(__FUNCTION__);

  // Avoid loading the kernel when dealing with kernel building error
  if (!\Drupal::hasContainer()) {
    return;
  }

  if (null === $dataCollectorEnabled) {
    $dataCollectorEnabled = \Drupal::getContainer()->has('makinacorpus.drupal_watchdog_collector');
  }
  if (!$dataCollectorEnabled) {
    return;
  }

  /** @var \MakinaCorpus\Drupal\Sf\DataCollector\DrupalWatchdogDataCollector $watchdogDataCollector */
  $watchdogDataCollector = \Drupal::service('makinacorpus.drupal_watchdog_collector');
  $watchdogDataCollector->logEntry($log_entry);
}

/**
 * Shortcut for performance critical code paths
 * You should not rely upon it except maybe for url_outbound_alter() hooks.
 */
function path_alias_is_blacklisted($path) {
  $whitelist = $GLOBALS['conf']['path_alias_whitelist'];
  return false !== $whitelist && !isset($whitelist[strtok($path, '/')]);
}

/**
 * Implements hook_system_theme_engine_info().
 */
function sf_dic_system_theme_engine_info() {
  return ['twig' => drupal_get_path('module','sf_dic') . '/Resources/engine/twig.engine'];
}
