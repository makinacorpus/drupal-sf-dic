<?php
/**
 * @file
 * Various proxy functions to make it work.
 */

use Drupal\Core\Form\FormInterface;
use Drupal\Core\Form\FormState;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_boot().
 */
function sf_dic_boot() {
  // There is no way to allow this module to get the enabled module list
  // before the DRUPAL_BOOTSTRAP_CONFIGURATION phase (if you are lucky and
  // caches are set) or before the DRUPAL_BOOTSTRAP_DATABASE phase (because
  // Drupal will need the database to get the module list). That's why the
  // hook_boot() implementation will keep living in here. This means that
  // there is absolutly no way to allow cache backends services to be in
  // the service container, sad, but true story.
  if (!\Drupal::hasContainer()) {
    \Drupal::_init();
  }
}

/**
 * Menu callback for doing forms.
 */
function sf_dic_page_form($formClass, ...$args) {
  return \Drupal::formBuilder()->getForm($formClass, ...$args);
}

/**
 * Implements hook_form().
 */
function sf_dic_forms($form_id, $args) {
  $formBuilder = \Drupal::formBuilder();

  $form = $formBuilder->getFormInstance($form_id);

  if ($form) {
    return [$form_id => ['callback' => 'sf_dic_forms_proxy']];
  }

  return [];
}

/**
 * Recursively unpack callbacks for the given form
 *
 * @param FormInterface $instance
 * @param FormStateInterface $form_state
 * @param mixed[] $form
 */
function _sf_dic_forms_proxy_unpack_callback(FormInterface $form_obj, FormStateInterface $form_state_obj, array &$form) {

  foreach (['#process', '#after_build', '#submit', '#validate', '#element_validate'] as $name) {
    // @todo Handle ['#ajax' => callback].
    if (isset($form[$name])) {
      if (is_array($form[$name])) {
        foreach ($form[$name] as $index => $callback) {
          // Lookup for callbacks declared such as "::submitSomething()" and
          // build a PHP valid callable with it instead, that should be enough
          // to trick core From API into executing it.
          if (!is_callable($callback) && is_string($callback) && '::' === substr($callback, 0, 2)) {
            $method = substr($callback, 2);
            $form[$name][$index] = function (&$form) use ($form_obj, $method, $form_state_obj) {
              return call_user_func([$form_obj, $method], $form, $form_state_obj);
            };
          }
        }
      } // Else this is an error... But I'll that to core to deal with.
    }
  }

  foreach (element_children($form) as $key) {
    _sf_dic_forms_proxy_unpack_callback($form_obj, $form_state_obj, $form[$key]);
  }
}

/**
 * Build form from a FormInterface object
 */
function sf_dic_forms_proxy($form, &$form_state, ...$args) {

  $form_obj = \Drupal::formBuilder()->getFormInstance($form_state['build_info']['form_id']);
  if (!$form_obj) { // Just to be sure it won't WSOD.
    return $form;
  }

  $form_state_obj = new FormState($form_state);
  $form_state_obj->setFormObject($form_obj);

  $form = $form_obj->buildForm($form, $form_state_obj, ...$args);

  // Setup the submit and validate global handlers.
  if (empty($form['#submit'])) {
    $form['#submit'] = [
      function (&$form) use ($form_obj, $form_state_obj) {
        $form_obj->submitForm($form, $form_state_obj);
      }
    ];
  }
  if (empty($form['#validate'])) {
    $form['#validate'] = [
      function (&$form) use ($form_obj, $form_state_obj) {
        $form_obj->validateForm($form, $form_state_obj);
      }
    ];
  }

  // Because we want it to be really close to real Drupal forms, we need to
  // proceed to a few callback names unpacking.
  _sf_dic_forms_proxy_unpack_callback($form_obj, $form_state_obj, $form);

  return $form;
}

